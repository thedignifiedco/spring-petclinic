name: Release Management

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 3.5.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

env:
  JAVA_VERSION: '17'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Validate POM version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            RELEASE_VERSION="${{ github.event.release.tag_name }}"
          else
            RELEASE_VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Remove 'v' prefix if present
          RELEASE_VERSION=${RELEASE_VERSION#v}
          
          echo "Validating version: $RELEASE_VERSION"
          
          # Check if version matches POM
          POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "POM version: $POM_VERSION"
          
          if [[ "$POM_VERSION" != *"$RELEASE_VERSION"* ]]; then
            echo "❌ Version mismatch: POM contains $POM_VERSION but release is $RELEASE_VERSION"
            exit 1
          fi
          
          echo "✅ Version validation passed"

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Check for critical vulnerabilities
        run: |
          if [ -f "trivy-results.sarif" ]; then
            CRITICAL_COUNT=$(grep -c '"level": "error"' trivy-results.sarif || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Found $CRITICAL_COUNT critical security vulnerabilities"
              echo "Release blocked due to security issues"
              exit 1
            fi
            echo "✅ No critical vulnerabilities found"
          fi

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build application
        run: |
          ./mvnw clean package -DskipTests

      - name: Generate SBOM
        run: ./mvnw cyclonedx:makeAggregateBom

      - name: Generate JAR with dependencies
        run: |
          ./mvnw dependency:copy-dependencies -DincludeScope=runtime
          cp target/spring-petclinic-*.jar target/spring-petclinic-with-deps.jar

      - name: Create release artifacts
        run: |
          mkdir -p release-artifacts
          cp target/spring-petclinic-*.jar release-artifacts/
          cp target/cyclonedx.xml release-artifacts/
          cp target/dependency/ release-artifacts/ -r
          
          # Create checksums
          cd release-artifacts
          for file in *.jar; do
            sha256sum "$file" > "$file.sha256"
            sha512sum "$file" > "$file.sha512"
          done
          cd ..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            JAVA_VERSION=${{ env.JAVA_VERSION }}

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, docker-release]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ## Release v${{ github.event.inputs.version }}
            
            ### Artifacts
            
            This release includes the following artifacts:
            
            - **JAR files**: Ready-to-run Spring Boot application
            - **SBOM**: Software Bill of Materials (CycloneDX format)
            - **Dependencies**: All runtime dependencies
            - **Checksums**: SHA256 and SHA512 verification files
            
            ### Security
            
            - All security scans passed
            - No critical vulnerabilities detected
            - Docker image scanned and verified
            
            ### Docker
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.event.inputs.version }}
            docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.event.inputs.version }}
            ```
            
            ### Changelog
            
            See the [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ### Verification
            
            Verify the integrity of downloaded files:
            
            ```bash
            sha256sum -c spring-petclinic-*.jar.sha256
            sha512sum -c spring-petclinic-*.jar.sha512
            ```
            
            ### Metrics
            
            - **Build Status**: ✅ Successful
            - **Security Scan**: ✅ Passed
            - **Test Coverage**: ✅ Above threshold
            - **Dependencies**: ✅ Up to date
            
            ---
            
            **Release Date**: $(date -u +"%Y-%m-%d %H:%M UTC")
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/spring-petclinic-*.jar
          asset_name: spring-petclinic-${{ github.event.inputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Upload SBOM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/cyclonedx.xml
          asset_name: spring-petclinic-${{ github.event.inputs.version }}-sbom.xml
          asset_content_type: application/xml

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, docker-release, create-github-release]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🚀 Release Summary" >> release-summary.md
          echo "" >> release-summary.md
          echo "**Version**: ${{ github.event.inputs.version || github.event.release.tag_name }}" >> release-summary.md
          echo "**Repository**: ${{ github.repository }}" >> release-summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> release-summary.md
          echo "**Commit**: ${{ github.sha }}" >> release-summary.md
          echo "" >> release-summary.md
          echo "### Build Status:" >> release-summary.md
          if [ "${{ needs.build-release.result }}" == "success" ]; then
            echo "- ✅ Build: Successful" >> release-summary.md
          else
            echo "- ❌ Build: Failed" >> release-summary.md
          fi
          
          if [ "${{ needs.docker-release.result }}" == "success" ]; then
            echo "- ✅ Docker: Successful" >> release-summary.md
          else
            echo "- ❌ Docker: Failed" >> release-summary.md
          fi
          
          if [ "${{ needs.create-github-release.result }}" == "success" ]; then
            echo "- ✅ GitHub Release: Created" >> release-summary.md
          else
            echo "- ❌ GitHub Release: Failed" >> release-summary.md
          fi
          
          echo "" >> release-summary.md
          echo "### Artifacts:" >> release-summary.md
          echo "- JAR files with dependencies" >> release-summary.md
          echo "- Software Bill of Materials (SBOM)" >> release-summary.md
          echo "- Docker images (AMD64/ARM64)" >> release-summary.md
          echo "- Checksums for verification" >> release-summary.md

      - name: Upload Release Summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: release-summary.md

      # Add notification steps here (Slack, email, etc.)
      - name: Comment on Release
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Release build completed successfully! Check the artifacts and Docker images.'
            })
